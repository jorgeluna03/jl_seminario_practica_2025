/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vista;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.List;
import controlador.ControladorPrincipal;
import controlador.ControladorTurnero;
import controlador.ControladorCliente;
import controlador.ControladorAtencion;

/**
 * Formulario Principal del Sistema de Atención Diferenciada 2025
 * Implementa la estructura MDI con menús, sidebar, toolbar y barra de estado
 * 
 * @author Jorge Luna
 * @version 1.0
 */
public class frmMenuPrincipal extends javax.swing.JFrame {

    private JDesktopPane desktopPane;
    private List<JInternalFrame> ventanasAbiertas;
    private String usuarioLogueado = "j.luna";
    private String rolUsuario = "Supervisor";
    private String canalActual = "Sucursal Centro";
    private boolean conexionDB = true;
    
    // Referencias a controladores
    private ControladorPrincipal controladorPrincipal;
    private ControladorTurnero controladorTurnero;
    private ControladorCliente controladorCliente;
    private ControladorAtencion controladorAtencion;

    /**
     * Creates new form frmMenuPrincipal
     */
    public frmMenuPrincipal() {
        initComponents();
        ventanasAbiertas = new ArrayList<>();
        configurarAtajosTeclado();
        actualizarBarraEstado();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        // Configuración básica del JFrame
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Sistema de Atención Diferenciada 2025 - Menú Principal");
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        
        // Agregar listener para confirmar cierre
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                confirmarSalida();
            }
        });

        // Crear MenuBar
        crearMenuBar();
        
        // Crear Toolbar
        crearToolbar();
        
        // Crear Sidebar
        crearSidebar();
        
        // Crear área central MDI
        crearAreaCentral();
        
        // Crear barra de estado
        crearBarraEstado();
        
        // Configurar layout principal
        configurarLayout();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Crea la barra de menús principal
     */
    private void crearMenuBar() {
        JMenuBar menuBar = new JMenuBar();
        
        // 1. Archivo
        JMenu menuArchivo = new JMenu("Archivo");
        menuArchivo.setMnemonic('A');
        
        JMenuItem itemInicio = new JMenuItem("Inicio", new ImageIcon());
        itemInicio.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_H, ActionEvent.CTRL_MASK));
        itemInicio.addActionListener(e -> mostrarDashboard());
        menuArchivo.add(itemInicio);
        
        menuArchivo.addSeparator();
        
        JMenuItem itemCambiarUsuario = new JMenuItem("Cambiar de usuario...");
        itemCambiarUsuario.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_L, ActionEvent.CTRL_MASK));
        itemCambiarUsuario.addActionListener(e -> cambiarUsuario());
        menuArchivo.add(itemCambiarUsuario);
        
        JMenuItem itemCerrarSesion = new JMenuItem("Cerrar sesión");
        itemCerrarSesion.addActionListener(e -> cerrarSesion());
        menuArchivo.add(itemCerrarSesion);
        
        menuArchivo.addSeparator();
        
        JMenuItem itemSalir = new JMenuItem("Salir");
        itemSalir.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F4, ActionEvent.ALT_MASK));
        itemSalir.addActionListener(e -> confirmarSalida());
        menuArchivo.add(itemSalir);
        
        menuBar.add(menuArchivo);
        
        // 2. Atención
        JMenu menuAtencion = new JMenu("Atención");
        menuAtencion.setMnemonic('T');
        
        JMenu submenuTurnero = new JMenu("Turnero");
        JMenuItem itemAbrirTurnero = new JMenuItem("Abrir Turnero");
        itemAbrirTurnero.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F2, 0));
        itemAbrirTurnero.addActionListener(e -> abrirTurnero());
        submenuTurnero.add(itemAbrirTurnero);
        
        JMenuItem itemLlamarSiguiente = new JMenuItem("Llamar siguiente");
        itemLlamarSiguiente.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F3, 0));
        itemLlamarSiguiente.addActionListener(e -> llamarSiguiente());
        submenuTurnero.add(itemLlamarSiguiente);
        
        JMenuItem itemReasignarTurno = new JMenuItem("Reasignar turno");
        itemReasignarTurno.addActionListener(e -> reasignarTurno());
        submenuTurnero.add(itemReasignarTurno);
        
        menuAtencion.add(submenuTurnero);
        menuAtencion.addSeparator();
        
        JMenu submenuRegistrarAtencion = new JMenu("Registrar Atención");
        JMenuItem itemNuevaAtencion = new JMenuItem("Nueva Atención");
        itemNuevaAtencion.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F4, 0));
        itemNuevaAtencion.addActionListener(e -> nuevaAtencion());
        submenuRegistrarAtencion.add(itemNuevaAtencion);
        
        JMenuItem itemAtencionesEnCurso = new JMenuItem("Atenciones en curso");
        itemAtencionesEnCurso.addActionListener(e -> atencionesEnCurso());
        submenuRegistrarAtencion.add(itemAtencionesEnCurso);
        
        JMenuItem itemHistorialAtenciones = new JMenuItem("Historial de Atenciones");
        itemHistorialAtenciones.addActionListener(e -> historialAtenciones());
        submenuRegistrarAtencion.add(itemHistorialAtenciones);
        
        menuAtencion.add(submenuRegistrarAtencion);
        menuAtencion.addSeparator();
        
        JMenu submenuGestiones = new JMenu("Gestiones");
        JMenuItem itemCargarGestion = new JMenuItem("Cargar Gestión");
        itemCargarGestion.addActionListener(e -> cargarGestion());
        submenuGestiones.add(itemCargarGestion);
        
        JMenuItem itemMotivosSubmotivos = new JMenuItem("Motivos / Submotivos");
        itemMotivosSubmotivos.addActionListener(e -> motivosSubmotivos());
        submenuGestiones.add(itemMotivosSubmotivos);
        
        JMenuItem itemEstadosGestion = new JMenuItem("Estados de Gestión");
        itemEstadosGestion.addActionListener(e -> estadosGestion());
        submenuGestiones.add(itemEstadosGestion);
        
        menuAtencion.add(submenuGestiones);
        
        menuBar.add(menuAtencion);
        
        // 3. Clientes
        JMenu menuClientes = new JMenu("Clientes");
        menuClientes.setMnemonic('C');
        
        JMenuItem itemABMClientes = new JMenuItem("ABM de Clientes");
        itemABMClientes.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C, ActionEvent.ALT_MASK));
        itemABMClientes.addActionListener(e -> abmClientes());
        menuClientes.add(itemABMClientes);
        
        JMenuItem itemBusquedaAvanzada = new JMenuItem("Búsqueda avanzada");
        itemBusquedaAvanzada.addActionListener(e -> busquedaAvanzada());
        menuClientes.add(itemBusquedaAvanzada);
        
        JMenuItem itemContactabilidad = new JMenuItem("Contactabilidad & Preferencias");
        itemContactabilidad.addActionListener(e -> contactabilidadPreferencias());
        menuClientes.add(itemContactabilidad);
        
        JMenuItem itemHistorialInteracciones = new JMenuItem("Historial de Interacciones");
        itemHistorialInteracciones.addActionListener(e -> historialInteracciones());
        menuClientes.add(itemHistorialInteracciones);
        
        menuBar.add(menuClientes);
        
        // 4. Colaboradores
        JMenu menuColaboradores = new JMenu("Colaboradores");
        menuColaboradores.setMnemonic('O');
        
        JMenuItem itemABMColaboradores = new JMenuItem("ABM de Colaboradores");
        itemABMColaboradores.addActionListener(e -> abmColaboradores());
        menuColaboradores.add(itemABMColaboradores);
        
        JMenuItem itemAsignacionCanales = new JMenuItem("Asignación a Canales/Sucursales");
        itemAsignacionCanales.addActionListener(e -> asignacionCanales());
        menuColaboradores.add(itemAsignacionCanales);
        
        JMenuItem itemDisponibilidad = new JMenuItem("Disponibilidad / Calendario");
        itemDisponibilidad.addActionListener(e -> disponibilidadCalendario());
        menuColaboradores.add(itemDisponibilidad);
        
        menuBar.add(menuColaboradores);
        
        // 5. Modelos / Reglas
        JMenu menuModelos = new JMenu("Modelos / Reglas");
        menuModelos.setMnemonic('M');
        
        JMenuItem itemABMModelo = new JMenuItem("ABM Modelo");
        itemABMModelo.addActionListener(e -> abmModelo());
        menuModelos.add(itemABMModelo);
        
        JMenuItem itemSegmentaciones = new JMenuItem("Segmentaciones / Reglas");
        itemSegmentaciones.addActionListener(e -> segmentacionesReglas());
        menuModelos.add(itemSegmentaciones);
        
        JMenuItem itemSimulaciones = new JMenuItem("Simulaciones / Pruebas A/B");
        itemSimulaciones.addActionListener(e -> simulacionesPruebas());
        menuModelos.add(itemSimulaciones);
        
        JMenuItem itemFlujos = new JMenuItem("Flujos / Derivaciones");
        itemFlujos.addActionListener(e -> flujosDerivaciones());
        menuModelos.add(itemFlujos);
        
        JMenuItem itemSLAs = new JMenuItem("SLAs y Prioridades");
        itemSLAs.addActionListener(e -> slasPrioridades());
        menuModelos.add(itemSLAs);
        
        menuBar.add(menuModelos);
        
        // 6. Canales
        JMenu menuCanales = new JMenu("Canales");
        menuCanales.setMnemonic('N');
        
        JMenuItem itemABMCanales = new JMenuItem("ABM de Canales");
        itemABMCanales.addActionListener(e -> abmCanales());
        menuCanales.add(itemABMCanales);
        
        JMenuItem itemHorariosCapacidad = new JMenuItem("Horarios / Capacidad");
        itemHorariosCapacidad.addActionListener(e -> horariosCapacidad());
        menuCanales.add(itemHorariosCapacidad);
        
        JMenuItem itemParametrosEnrutamiento = new JMenuItem("Parámetros de Enrutamiento");
        itemParametrosEnrutamiento.addActionListener(e -> parametrosEnrutamiento());
        menuCanales.add(itemParametrosEnrutamiento);
        
        menuBar.add(menuCanales);
        
        // 7. Reportes
        JMenu menuReportes = new JMenu("Reportes");
        menuReportes.setMnemonic('R');
        
        JMenuItem itemAtencionesPeriodo = new JMenuItem("Atenciones por período");
        itemAtencionesPeriodo.addActionListener(e -> atencionesPeriodo());
        menuReportes.add(itemAtencionesPeriodo);
        
        JMenuItem itemTiemposEspera = new JMenuItem("Tiempos de espera y servicio");
        itemTiemposEspera.addActionListener(e -> tiemposEspera());
        menuReportes.add(itemTiemposEspera);
        
        JMenuItem itemEficiencia = new JMenuItem("Eficiencia por canal / colaborador");
        itemEficiencia.addActionListener(e -> eficienciaCanalColaborador());
        menuReportes.add(itemEficiencia);
        
        JMenuItem itemSatisfaccion = new JMenuItem("Satisfacción / NPS");
        itemSatisfaccion.addActionListener(e -> satisfaccionNPS());
        menuReportes.add(itemSatisfaccion);
        
        JMenuItem itemExportar = new JMenuItem("Exportar a CSV/Excel/PDF");
        itemExportar.addActionListener(e -> exportarReportes());
        menuReportes.add(itemExportar);
        
        menuBar.add(menuReportes);
        
        // 8. Configuración
        JMenu menuConfiguracion = new JMenu("Configuración");
        menuConfiguracion.setMnemonic('G');
        
        JMenuItem itemParametrosGenerales = new JMenuItem("Parámetros generales");
        itemParametrosGenerales.addActionListener(e -> parametrosGenerales());
        menuConfiguracion.add(itemParametrosGenerales);
        
        JMenuItem itemCatalogos = new JMenuItem("Catálogos");
        itemCatalogos.addActionListener(e -> catalogos());
        menuConfiguracion.add(itemCatalogos);
        
        JMenuItem itemIntegraciones = new JMenuItem("Integraciones");
        itemIntegraciones.addActionListener(e -> integraciones());
        menuConfiguracion.add(itemIntegraciones);
        
        JMenuItem itemPlantillas = new JMenuItem("Plantillas");
        itemPlantillas.addActionListener(e -> plantillas());
        menuConfiguracion.add(itemPlantillas);
        
        JMenuItem itemAuditoria = new JMenuItem("Auditoría / Logs");
        itemAuditoria.addActionListener(e -> auditoriaLogs());
        menuConfiguracion.add(itemAuditoria);
        
        menuBar.add(menuConfiguracion);
        
        // 9. Seguridad
        JMenu menuSeguridad = new JMenu("Seguridad");
        menuSeguridad.setMnemonic('S');
        
        JMenuItem itemUsuarios = new JMenuItem("Usuarios");
        itemUsuarios.addActionListener(e -> usuarios());
        menuSeguridad.add(itemUsuarios);
        
        JMenuItem itemRolesPermisos = new JMenuItem("Roles y Permisos");
        itemRolesPermisos.addActionListener(e -> rolesPermisos());
        menuSeguridad.add(itemRolesPermisos);
        
        JMenuItem itemPoliticas = new JMenuItem("Políticas");
        itemPoliticas.addActionListener(e -> politicas());
        menuSeguridad.add(itemPoliticas);
        
        JMenuItem itemBitacora = new JMenuItem("Bitácora de accesos");
        itemBitacora.addActionListener(e -> bitacoraAccesos());
        menuSeguridad.add(itemBitacora);
        
        menuBar.add(menuSeguridad);
        
        // 10. Ventanas (MDI)
        JMenu menuVentanas = new JMenu("Ventanas");
        menuVentanas.setMnemonic('V');
        
        JMenuItem itemCascada = new JMenuItem("Cascada");
        itemCascada.addActionListener(e -> cascadaVentanas());
        menuVentanas.add(itemCascada);
        
        JMenuItem itemMosaico = new JMenuItem("Mosaico");
        itemMosaico.addActionListener(e -> mosaicoVentanas());
        menuVentanas.add(itemMosaico);
        
        JMenuItem itemCerrarTodas = new JMenuItem("Cerrar todas");
        itemCerrarTodas.addActionListener(e -> cerrarTodasVentanas());
        menuVentanas.add(itemCerrarTodas);
        
        JMenuItem itemRestaurarUltima = new JMenuItem("Restaurar última");
        itemRestaurarUltima.addActionListener(e -> restaurarUltimaVentana());
        menuVentanas.add(itemRestaurarUltima);
        
        menuBar.add(menuVentanas);
        
        // 11. Ayuda
        JMenu menuAyuda = new JMenu("Ayuda");
        menuAyuda.setMnemonic('Y');
        
        JMenuItem itemAcercaDe = new JMenuItem("Acerca de...");
        itemAcercaDe.addActionListener(e -> acercaDe());
        menuAyuda.add(itemAcercaDe);
        
        JMenuItem itemAtajosTeclado = new JMenuItem("Atajos de teclado");
        itemAtajosTeclado.addActionListener(e -> atajosTeclado());
        menuAyuda.add(itemAtajosTeclado);
        
        JMenuItem itemGuiaRapida = new JMenuItem("Guía rápida");
        itemGuiaRapida.addActionListener(e -> guiaRapida());
        menuAyuda.add(itemGuiaRapida);
        
        JMenuItem itemSoporte = new JMenuItem("Soporte / Contacto");
        itemSoporte.addActionListener(e -> soporteContacto());
        menuAyuda.add(itemSoporte);
        
        menuBar.add(menuAyuda);
        
        setJMenuBar(menuBar);
    }

    /**
     * Crea la barra de herramientas
     */
    private void crearToolbar() {
        JToolBar toolbar = new JToolBar("Herramientas");
        toolbar.setFloatable(false);
        
        // Nuevo
        JButton btnNuevo = new JButton("Nuevo", new ImageIcon());
        btnNuevo.setToolTipText("Nuevo (Ctrl+N)");
        btnNuevo.setMnemonic(KeyEvent.VK_N);
        btnNuevo.addActionListener(e -> nuevo());
        toolbar.add(btnNuevo);
        
        // Guardar
        JButton btnGuardar = new JButton("Guardar", new ImageIcon());
        btnGuardar.setToolTipText("Guardar (Ctrl+S)");
        btnGuardar.setMnemonic(KeyEvent.VK_S);
        btnGuardar.addActionListener(e -> guardar());
        toolbar.add(btnGuardar);
        
        toolbar.addSeparator();
        
        // Buscar
        JButton btnBuscar = new JButton("Buscar", new ImageIcon());
        btnBuscar.setToolTipText("Buscar (Ctrl+B)");
        btnBuscar.setMnemonic(KeyEvent.VK_B);
        btnBuscar.addActionListener(e -> buscar());
        toolbar.add(btnBuscar);
        
        // Exportar
        JButton btnExportar = new JButton("Exportar", new ImageIcon());
        btnExportar.setToolTipText("Exportar (Ctrl+E)");
        btnExportar.setMnemonic(KeyEvent.VK_E);
        btnExportar.addActionListener(e -> exportar());
        toolbar.add(btnExportar);
        
        // Refrescar
        JButton btnRefrescar = new JButton("Refrescar", new ImageIcon());
        btnRefrescar.setToolTipText("Refrescar (F5)");
        btnRefrescar.setMnemonic(KeyEvent.VK_F5);
        btnRefrescar.addActionListener(e -> refrescar());
        toolbar.add(btnRefrescar);
        
        toolbar.addSeparator();
        
        // Ayuda
        JButton btnAyuda = new JButton("Ayuda", new ImageIcon());
        btnAyuda.setToolTipText("Ayuda (F1)");
        btnAyuda.setMnemonic(KeyEvent.VK_F1);
        btnAyuda.addActionListener(e -> ayuda());
        toolbar.add(btnAyuda);
        
        getContentPane().add(toolbar, BorderLayout.NORTH);
    }

    /**
     * Crea la barra lateral (Sidebar)
     */
    private void crearSidebar() {
        JPanel sidebar = new JPanel();
        sidebar.setPreferredSize(new Dimension(200, 0));
        sidebar.setBorder(new TitledBorder("Accesos Rápidos"));
        sidebar.setLayout(new BoxLayout(sidebar, BoxLayout.Y_AXIS));
        
        // Turnero
        JButton btnTurnero = new JButton("Turnero");
        btnTurnero.setToolTipText("Abrir Turnero (F2)");
        btnTurnero.setMnemonic(KeyEvent.VK_F2);
        btnTurnero.addActionListener(e -> abrirTurnero());
        sidebar.add(btnTurnero);
        
        // Nueva Atención
        JButton btnNuevaAtencion = new JButton("Nueva Atención");
        btnNuevaAtencion.setToolTipText("Nueva Atención (F4)");
        btnNuevaAtencion.setMnemonic(KeyEvent.VK_F4);
        btnNuevaAtencion.addActionListener(e -> nuevaAtencion());
        sidebar.add(btnNuevaAtencion);
        
        // Buscar Cliente
        JButton btnBuscarCliente = new JButton("Buscar Cliente");
        btnBuscarCliente.setToolTipText("Buscar Cliente (Ctrl+B)");
        btnBuscarCliente.setMnemonic(KeyEvent.VK_B);
        btnBuscarCliente.addActionListener(e -> buscarCliente());
        sidebar.add(btnBuscarCliente);
        
        // Cargar Gestión
        JButton btnCargarGestion = new JButton("Cargar Gestión");
        btnCargarGestion.addActionListener(e -> cargarGestion());
        sidebar.add(btnCargarGestion);
        
        // Reportes
        JButton btnReportes = new JButton("Reportes");
        btnReportes.addActionListener(e -> reportes());
        sidebar.add(btnReportes);
        
        // Mi Día
        JButton btnMiDia = new JButton("Mi Día");
        btnMiDia.addActionListener(e -> miDia());
        sidebar.add(btnMiDia);
        
        getContentPane().add(sidebar, BorderLayout.WEST);
    }

    /**
     * Crea el área central MDI
     */
    private void crearAreaCentral() {
        desktopPane = new JDesktopPane();
        desktopPane.setBackground(Color.LIGHT_GRAY);
        getContentPane().add(desktopPane, BorderLayout.CENTER);
    }

    /**
     * Crea la barra de estado
     */
    private void crearBarraEstado() {
        JPanel statusPanel = new JPanel(new BorderLayout());
        statusPanel.setBorder(BorderFactory.createLoweredBevelBorder());
        
        JLabel lblUsuario = new JLabel("Usuario: " + usuarioLogueado);
        JLabel lblRol = new JLabel("Rol: " + rolUsuario);
        JLabel lblCanal = new JLabel("Canal: " + canalActual);
        JLabel lblConexion = new JLabel("DB: " + (conexionDB ? "Conectado" : "Desconectado"));
        
        JPanel leftPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        leftPanel.add(lblUsuario);
        leftPanel.add(new JLabel("|"));
        leftPanel.add(lblRol);
        leftPanel.add(new JLabel("|"));
        leftPanel.add(lblCanal);
        
        JPanel rightPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        rightPanel.add(lblConexion);
        
        statusPanel.add(leftPanel, BorderLayout.WEST);
        statusPanel.add(rightPanel, BorderLayout.EAST);
        
        getContentPane().add(statusPanel, BorderLayout.SOUTH);
    }

    /**
     * Configura el layout principal
     */
    private void configurarLayout() {
        // El layout ya está configurado en los métodos anteriores
        // BorderLayout con componentes en NORTH, WEST, CENTER, SOUTH
    }

    /**
     * Configura los atajos de teclado globales
     */
    private void configurarAtajosTeclado() {
        // Configurar atajos globales adicionales
        ActionMap actionMap = getRootPane().getActionMap();
        InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        
        // F2 - Abrir Turnero
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_F2, 0), "abrirTurnero");
        actionMap.put("abrirTurnero", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                abrirTurnero();
            }
        });
        
        // F3 - Llamar siguiente
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_F3, 0), "llamarSiguiente");
        actionMap.put("llamarSiguiente", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                llamarSiguiente();
            }
        });
        
        // F4 - Nueva Atención
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_F4, 0), "nuevaAtencion");
        actionMap.put("nuevaAtencion", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                nuevaAtencion();
            }
        });
        
        // F5 - Refrescar
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_F5, 0), "refrescar");
        actionMap.put("refrescar", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                refrescar();
            }
        });
        
        // F1 - Ayuda
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_F1, 0), "ayuda");
        actionMap.put("ayuda", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                ayuda();
            }
        });
    }

    /**
     * Actualiza la información en la barra de estado
     */
    private void actualizarBarraEstado() {
        // La barra de estado se actualiza automáticamente
        // Aquí se puede agregar lógica para actualizar dinámicamente
    }
    
    /**
     * Actualiza la barra de estado con información específica
     */
    public void actualizarBarraEstado(String usuario, String rol, String canal, boolean conexion) {
        this.usuarioLogueado = usuario;
        this.rolUsuario = rol;
        this.canalActual = canal;
        this.conexionDB = conexion;
        
        // Actualizar la vista de la barra de estado
        // (La implementación específica dependería de cómo se muestre la barra de estado)
    }
    
    // ========== SETTERS PARA CONTROLADORES ==========
    
    public void setControladorPrincipal(ControladorPrincipal controladorPrincipal) {
        this.controladorPrincipal = controladorPrincipal;
    }
    
    public void setControladorTurnero(ControladorTurnero controladorTurnero) {
        this.controladorTurnero = controladorTurnero;
    }
    
    public void setControladorCliente(ControladorCliente controladorCliente) {
        this.controladorCliente = controladorCliente;
    }
    
    public void setControladorAtencion(ControladorAtencion controladorAtencion) {
        this.controladorAtencion = controladorAtencion;
    }
    
    // ========== GETTERS ==========
    
    public JDesktopPane getDesktopPane() {
        return desktopPane;
    }

    // ========== MÉTODOS DE ACCIÓN ==========

    private void mostrarDashboard() {
        JOptionPane.showMessageDialog(this, "Mostrando Dashboard...");
    }

    private void cambiarUsuario() {
        JOptionPane.showMessageDialog(this, "Funcionalidad: Cambiar de usuario...");
    }

    private void cerrarSesion() {
        int opcion = JOptionPane.showConfirmDialog(this, 
            "¿Está seguro que desea cerrar la sesión?", 
            "Cerrar Sesión", 
            JOptionPane.YES_NO_OPTION);
        if (opcion == JOptionPane.YES_OPTION) {
            JOptionPane.showMessageDialog(this, "Sesión cerrada correctamente.");
        }
    }

    private void confirmarSalida() {
        int opcion = JOptionPane.showConfirmDialog(this, 
            "¿Está seguro que desea salir del sistema?", 
            "Salir del Sistema", 
            JOptionPane.YES_NO_OPTION);
        if (opcion == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }

    private void abrirTurnero() {
        try {
            // Abrir directamente el formulario de turnero
            frmTurneroDirecto turneroDirecto = new frmTurneroDirecto();
            turneroDirecto.setVisible(true);
            
            // Notificar evento si hay controlador
            if (controladorTurnero != null) {
                // Aquí se podría notificar el evento
                JOptionPane.showMessageDialog(this, "Turnero abierto exitosamente");
            }
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, 
                "Error al abrir el turnero: " + e.getMessage(), 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
        }
    }

    private void llamarSiguiente() {
        if (controladorTurnero != null) {
            controladorTurnero.llamarSiguiente();
        } else {
            JOptionPane.showMessageDialog(this, "Controlador de turnero no disponible");
        }
    }

    private void reasignarTurno() {
        if (controladorTurnero != null) {
            controladorTurnero.reasignarTurno();
        } else {
            JOptionPane.showMessageDialog(this, "Controlador de turnero no disponible");
        }
    }

    private void nuevaAtencion() {
        if (controladorAtencion != null) {
            // Aquí se podría abrir un formulario para crear nueva atención
            JOptionPane.showMessageDialog(this, "Funcionalidad: Nueva Atención...");
        } else {
            JOptionPane.showMessageDialog(this, "Controlador de atención no disponible");
        }
    }

    private void atencionesEnCurso() {
        JOptionPane.showMessageDialog(this, "Funcionalidad: Atenciones en curso...");
    }

    private void historialAtenciones() {
        JOptionPane.showMessageDialog(this, "Funcionalidad: Historial de Atenciones...");
    }

    private void cargarGestion() {
        JOptionPane.showMessageDialog(this, "Funcionalidad: Cargar Gestión...");
    }

    private void motivosSubmotivos() {
        JOptionPane.showMessageDialog(this, "Funcionalidad: Motivos / Submotivos...");
    }

    private void estadosGestion() {
        JOptionPane.showMessageDialog(this, "Funcionalidad: Estados de Gestión...");
    }

    private void abmClientes() {
        JOptionPane.showMessageDialog(this, "Funcionalidad: ABM de Clientes...");
    }

    private void busquedaAvanzada() {
        JOptionPane.showMessageDialog(this, "Funcionalidad: Búsqueda avanzada...");
    }

    private void contactabilidadPreferencias() {
        JOptionPane.showMessageDialog(this, "Funcionalidad: Contactabilidad & Preferencias...");
    }

    private void historialInteracciones() {
        JOptionPane.showMessageDialog(this, "Funcionalidad: Historial de Interacciones...");
    }

    private void abmColaboradores() {
        JOptionPane.showMessageDialog(this, "Funcionalidad: ABM de Colaboradores...");
    }

    private void asignacionCanales() {
        JOptionPane.showMessageDialog(this, "Funcionalidad: Asignación a Canales/Sucursales...");
    }

    private void disponibilidadCalendario() {
        JOptionPane.showMessageDialog(this, "Funcionalidad: Disponibilidad / Calendario...");
    }

    private void abmModelo() {
        JOptionPane.showMessageDialog(this, "Funcionalidad: ABM Modelo...");
    }

    private void segmentacionesReglas() {
        JOptionPane.showMessageDialog(this, "Funcionalidad: Segmentaciones / Reglas...");
    }

    private void simulacionesPruebas() {
        JOptionPane.showMessageDialog(this, "Funcionalidad: Simulaciones / Pruebas A/B...");
    }

    private void flujosDerivaciones() {
        JOptionPane.showMessageDialog(this, "Funcionalidad: Flujos / Derivaciones...");
    }

    private void slasPrioridades() {
        JOptionPane.showMessageDialog(this, "Funcionalidad: SLAs y Prioridades...");
    }

    private void abmCanales() {
        JOptionPane.showMessageDialog(this, "Funcionalidad: ABM de Canales...");
    }

    private void horariosCapacidad() {
        JOptionPane.showMessageDialog(this, "Funcionalidad: Horarios / Capacidad...");
    }

    private void parametrosEnrutamiento() {
        JOptionPane.showMessageDialog(this, "Funcionalidad: Parámetros de Enrutamiento...");
    }

    private void atencionesPeriodo() {
        JOptionPane.showMessageDialog(this, "Funcionalidad: Atenciones por período...");
    }

    private void tiemposEspera() {
        JOptionPane.showMessageDialog(this, "Funcionalidad: Tiempos de espera y servicio...");
    }

    private void eficienciaCanalColaborador() {
        JOptionPane.showMessageDialog(this, "Funcionalidad: Eficiencia por canal / colaborador...");
    }

    private void satisfaccionNPS() {
        JOptionPane.showMessageDialog(this, "Funcionalidad: Satisfacción / NPS...");
    }

    private void exportarReportes() {
        JOptionPane.showMessageDialog(this, "Funcionalidad: Exportar a CSV/Excel/PDF...");
    }

    private void parametrosGenerales() {
        JOptionPane.showMessageDialog(this, "Funcionalidad: Parámetros generales...");
    }

    private void catalogos() {
        JOptionPane.showMessageDialog(this, "Funcionalidad: Catálogos...");
    }

    private void integraciones() {
        JOptionPane.showMessageDialog(this, "Funcionalidad: Integraciones...");
    }

    private void plantillas() {
        JOptionPane.showMessageDialog(this, "Funcionalidad: Plantillas...");
    }

    private void auditoriaLogs() {
        JOptionPane.showMessageDialog(this, "Funcionalidad: Auditoría / Logs...");
    }

    private void usuarios() {
        JOptionPane.showMessageDialog(this, "Funcionalidad: Usuarios...");
    }

    private void rolesPermisos() {
        JOptionPane.showMessageDialog(this, "Funcionalidad: Roles y Permisos...");
    }

    private void politicas() {
        JOptionPane.showMessageDialog(this, "Funcionalidad: Políticas...");
    }

    private void bitacoraAccesos() {
        JOptionPane.showMessageDialog(this, "Funcionalidad: Bitácora de accesos...");
    }

    private void cascadaVentanas() {
        if (ventanasAbiertas.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay ventanas abiertas para organizar.");
            return;
        }
        
        int x = 0, y = 0;
        int offset = 30;
        
        for (JInternalFrame frame : ventanasAbiertas) {
            if (frame.isVisible()) {
                frame.setLocation(x, y);
                frame.setSize(400, 300);
                x += offset;
                y += offset;
            }
        }
    }

    private void mosaicoVentanas() {
        if (ventanasAbiertas.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay ventanas abiertas para organizar.");
            return;
        }
        
        int visibleFrames = 0;
        for (JInternalFrame frame : ventanasAbiertas) {
            if (frame.isVisible()) {
                visibleFrames++;
            }
        }
        
        if (visibleFrames == 0) {
            JOptionPane.showMessageDialog(this, "No hay ventanas visibles para organizar.");
            return;
        }
        
        // Calcular dimensiones para mosaico
        int cols = (int) Math.ceil(Math.sqrt(visibleFrames));
        int rows = (int) Math.ceil((double) visibleFrames / cols);
        
        int frameWidth = desktopPane.getWidth() / cols;
        int frameHeight = desktopPane.getHeight() / rows;
        
        int index = 0;
        for (JInternalFrame frame : ventanasAbiertas) {
            if (frame.isVisible()) {
                int col = index % cols;
                int row = index / cols;
                
                frame.setLocation(col * frameWidth, row * frameHeight);
                frame.setSize(frameWidth, frameHeight);
                index++;
            }
        }
    }

    private void cerrarTodasVentanas() {
        for (JInternalFrame frame : ventanasAbiertas) {
            frame.dispose();
        }
        ventanasAbiertas.clear();
    }

    private void restaurarUltimaVentana() {
        JOptionPane.showMessageDialog(this, "Funcionalidad: Restaurar última ventana...");
    }

    private void acercaDe() {
        JOptionPane.showMessageDialog(this, 
            "Sistema de Atención Diferenciada 2025\n" +
            "Versión 1.0\n" +
            "Desarrollado por Jorge Luna\n" +
            "Seminario de Práctica 2025", 
            "Acerca de...", 
            JOptionPane.INFORMATION_MESSAGE);
    }

    private void atajosTeclado() {
        JOptionPane.showMessageDialog(this, 
            "ATAJOS DE TECLADO:\n\n" +
            "F2 - Abrir Turnero\n" +
            "F3 - Llamar siguiente\n" +
            "F4 - Nueva Atención\n" +
            "F5 - Refrescar\n" +
            "Ctrl+H - Inicio\n" +
            "Ctrl+L - Cambiar usuario\n" +
            "Ctrl+B - Buscar\n" +
            "Ctrl+S - Guardar\n" +
            "Ctrl+E - Exportar\n" +
            "Ctrl+N - Nuevo\n" +
            "Alt+C - ABM Clientes\n" +
            "Alt+F4 - Salir", 
            "Atajos de Teclado", 
            JOptionPane.INFORMATION_MESSAGE);
    }

    private void guiaRapida() {
        JOptionPane.showMessageDialog(this, "Funcionalidad: Guía rápida...");
    }

    private void soporteContacto() {
        JOptionPane.showMessageDialog(this, "Funcionalidad: Soporte / Contacto...");
    }

    // Métodos del Toolbar
    private void nuevo() {
        JOptionPane.showMessageDialog(this, "Funcionalidad: Nuevo...");
    }

    private void guardar() {
        JOptionPane.showMessageDialog(this, "Funcionalidad: Guardar...");
    }

    private void buscar() {
        JOptionPane.showMessageDialog(this, "Funcionalidad: Buscar...");
    }

    private void exportar() {
        JOptionPane.showMessageDialog(this, "Funcionalidad: Exportar...");
    }

    private void refrescar() {
        JOptionPane.showMessageDialog(this, "Funcionalidad: Refrescar...");
    }

    private void ayuda() {
        JOptionPane.showMessageDialog(this, "Funcionalidad: Ayuda...");
    }

    // Métodos del Sidebar
    private void buscarCliente() {
        JOptionPane.showMessageDialog(this, "Funcionalidad: Buscar Cliente...");
    }

    private void reportes() {
        JOptionPane.showMessageDialog(this, "Funcionalidad: Reportes...");
    }

    private void miDia() {
        JOptionPane.showMessageDialog(this, "Funcionalidad: Mi Día...");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmMenuPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmMenuPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmMenuPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmMenuPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmMenuPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
